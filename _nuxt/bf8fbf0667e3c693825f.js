(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{443:function(n,t,e){"use strict";var l={props:{now:String}},$=e(43),component=Object($.a)(l,(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",[e("header",[e("nav",{staticClass:"navbar navbar-expand-sm bg-dark navbar-dark"},[e("nuxt-link",{staticClass:"navbar-brand",attrs:{to:"/"}},[n._v("hukuda222の諸々")]),n._v(" "),e("ul",{staticClass:"navbar-nav mr-auto"},[e("li",{staticClass:"nav-item"},[e("nuxt-link",{class:["top"===n.now?"nav-link active":"nav-link"],attrs:{to:"/"}},[n._v("Top")])],1),n._v(" "),e("li",{staticClass:"nav-item"},[e("nuxt-link",{class:["about"===n.now?"nav-link active":"nav-link"],attrs:{to:"/about"}},[n._v("About")])],1),n._v(" "),e("li",{staticClass:"nav-item"},[e("nuxt-link",{class:["article_list"===n.now?"nav-link active":"nav-link"],attrs:{to:"/article_list"}},[n._v("Blog")])],1)])],1)])])}),[],!1,null,null,null);t.a=component.exports},469:function(n){n.exports=JSON.parse('{"201907301.md":"# Nuxt.jsでブログ作った\\n\\nブログはサーバーを立てて記事情報を管理することが多いと思うんですが、サーバーを借りるのはコストがかかるので\\ngithubのgh-pagesというサービスだけで完結するブログを作りました。\\n\\nNuxt.jsはデフォルトで必要なフォルダ構成とかを用意しておいてくれるので楽でした。\\nデザインは面倒なのでBootstrapをそのまま使いました。\\n\\n## 詰まったところ\\n他のフレームワークと違ってあんまりなかったんですが、gh-pagesで公開するにあたってrouter.baseの設定に手間取りました。\\n\\nnuxt.config.jsに以下のコードを書き加えればいいのですが、aタグを使っているとrootを置換してくれません。\\nそのため、全てのaタグをnuxt-linkタグに置換する必要がありました。\\n\\n```javascript\\nrouter: {\\n    base: process.env.DEPLOY_ENV === \'GH_PAGES\' ? \'/{リポジトリ名}/\' :\'/\'\\n},\\n\\n```\\n\\n\\n## 感想\\n\\nWebはよくわからないので、Webに強い人が作ったフレームワークの上澄みを啜るのがいいなぁと思いました。\\nFC2を使って生htmlで高校の部活のHPを手作りしてた時代と比べるとすごく楽になったなぁと思います。\\nそんなに褒められた実装ではないので、そのうち書き直しそうな気もします。\\n","201907302.md":"# abc135-fの考察\\n\\n\\nやったので考察を書きます。まぁ、本番はabc135-dで時間を溶かして問題すら読まなかったんですが。\\ndは13の倍数と聞いて脳死で1001使った判定法のやつを書いてたんですが、途中で関係ないのに気づいてDPでやりました。\\n\\n\\n[問題へのリンク](https://atcoder.jp/contests/abc135/tasks/abc135_f)\\n\\n\\n## 問題の概要\\n\\n文字列$s,t$が与えられます。$t$を$i$個連結した文字列が、$s$を$j$個連結した時に得られる文字列の部分列であるとき、\\n最大の$i$を求めなさい。$j$は任意の整数です。\\n\\n## 問題を見て\\n\\n$s$と$t$が最大で$10^5$なので、愚直な$O(N^2)$解法だと$10^{10}$でTLEだなぁと思いました。\\n30分くらい考えたんですが、思いつかないので解答を見ることにしました。\\n\\n## 解答を見て\\n\\n難易度の高いatcoderの問題に多い気がするのですが、解説が大雑把だなぁと思いました。\\nKMP法とZ-algorithmのリンクが紹介されてたのでKMP法の方を調べました。\\n\\n### KMP法\\n\\nKMP法は$O(|a|+|b|)$で、文字列$a$に含まれる文字列$b$の開始位置を全て求めるアルゴリズムです。([wiki調べ](https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%8C%E3%83%BC%E3%82%B9%E2%80%93%E3%83%A2%E3%83%AA%E3%82%B9%E2%80%93%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E6%B3%95))\\n\\n\\n最初、[snukeさんの記事](https://snuke.hatenablog.com/entry/2017/07/18/101026)を読みました。\\n割と時間をかけて読んだらある文字列$s$に対して$s[0;i-1]$の接頭語と接尾語が一致している最大文字数を$i$ごとに得る方法は分かったんですが、「wikipediaのとなんか違くない？？？」と思いました。\\n\\nよく考えたら実は繋がっていて、「文字列$a$に含まれる文字列$b$の開始位置を調べる」というのは、\\n「文字列$s=a+b$に対して$s[0;i-1]$の接頭語と接尾語が一致している最大文字数を$i$ごとに得る」ことで実現できます。\\nwikipediaの説明とsnukeさんの説明とどっちがわかりやすいかは個人差がありそうな気がしました。\\n\\n実装は[この記事](http://mayokoex.hatenablog.com/entry/2016/03/22/201438)がわかりやすかったです。何人かのこの問題の提出コードを見たのですが、この実装と同じようなものが多かった気がします。\\n\\n## 実装\\n\\nKMP法完全に理解した！終了解散解散！とは行かず、もうちょっとやることがあります。\\n\\nまず、$s$=\\"abc\\"、$t$=\\"bcabca\\"のように$s$が$t$より短い場合や、\\n$s$=\\"bca\\"、$t$=\\"abc\\"のようにループしてる場合があるので、\\n少なくとも$|s|$を$2\\\\times |t|$以上の長さになるまで繰り返します。以降は繰り返した文字列を$ss$とします。\\n\\nkmp関数は以下のものを使いました。\\n文字列$s$の中に登場する文字列$t$の最初のindexの配列を返します。\\n例えば、$s$=\\"abcabc\\"、$t$=\\"ab\\"を入力とすると$\\\\[0,3\\\\]$を返します。\\n\\n```c++\\nvector<ll> kmp(const string &s, const string &t) {\\n  vector<ll> table(t.size() + 1);\\n  table[0] = -1;\\n  ll j = -1;\\n  for (ll i = 0; i < t.size(); i++) {\\n    while (j >= 0 && t[i] != t[j])\\n      j = table[j];\\n    table[i + 1] = ++j;\\n  }\\n  vector<ll> ret;\\n  ll m = 0, i = 0, n = s.size();\\n  while (m + i < n) {\\n    if (t[i] == s[m + i]) {\\n      if (++i == (ll)t.size()) {\\n        ret.push_back(m);\\n        m = m + i - table[i];\\n        i = table[i];\\n      }\\n    } else {\\n      m = m + i - table[i];\\n      if (i > 0)\\n        i = table[i];\\n    }\\n  }\\n  return ret;\\n}\\n```\\n\\n\\n次に連続している$t$を探すわけですが、有向グラフよりも楽なのでUnionFindを使って分類します。\\n$ss$の中で$t$が含まれている部分の最初のindexをkmp関数が返してくれるわけですが、\\n$ss$は$s$の繰り返しなので、$|s|$以上のindexは$|s|$未満のindexと重複しているので考えなくて良いです。\\n\\nまた、基本的にindexの昇順に処理しているのでuniteする前に$x$と$(x+|t|) \\\\bmod |s|$の親が等しければ$i$が無限に存在することになります。\\n\\n```c++\\nint main() {\\n  string s, t;\\n  cin >> s >> t;\\n  ll slen = s.size();\\n  ll tlen = t.size();\\n  string ss = s;\\n  while (ss.size() < 2*tlen)\\n    ss += s;\\n  vector<ll> z = kmp(ss, t); // KMP法\\n  auto uf = UnionFind(slen); // UnionFind\\n  REP(i, z.size()) {\\n    ll x = z[i];\\n    if (x >= slen)\\n      continue; //重複するため\\n    ll y = (x + tlen) % slen;\\n    if (!uf.unite(x, y)) { //ループしてる\\n      cout << -1 << endl;\\n      return 0;\\n    }\\n  }\\n  ll ans = 0;\\n  REP(i, slen) ans = max(ans, uf.size(i) - 1LL);\\n  cout << ans << endl;\\n \\n  return 0;\\n}\\n\\n```\\n\\n## 感想\\n\\nKMP法そもそも知らなかったわけですが、知っててもできたか怪しいなぁと思いました。\\n"}')},473:function(n,t,e){"use strict";e.r(t);e(99),e(18),e(444);var l=e(443),$=e(469),r={data:function(){var param=location.search.replace("?",""),data="".concat(param,".md")in $?$["".concat(param,".md")]:"";return{article_data:data}},components:{Top:l.a},methods:{renderMathJax:function(){window.MathJax&&(window.MathJax.Hub.Config({tex2jax:{inlineMath:[["$","$"],["(",")"]],displayMath:[["$$","$$"],["[","]"]],processEscapes:!0,processEnvironments:!0},displayAlign:"center","HTML-CSS":{styles:{".MathJax_Display":{margin:0}},linebreaks:{automatic:!0}}}),window.MathJax.Hub.Queue(["Typeset",window.MathJax.Hub,this.$refs.mathJaxEl]))}},mounted:function(){this.renderMathJax()}},o=e(43),component=Object(o.a)(r,(function(){var n=this.$createElement,t=this._self._c||n;return t("div",[t("Top",{attrs:{now:"article_list"}}),this._v(" "),t("div",{staticClass:"container"},[t("h1",{staticClass:"mt-5"}),this._v(" "),t("div",{domProps:{innerHTML:this._s(this.$md.render(this.article_data))}})]),this._v(" "),t("br"),t("br"),t("br")],1)}),[],!1,null,null,null);t.default=component.exports}}]);