{
  "bodyContent": "# abc135-fの考察\n\n\nやったので考察を書きます。まぁ、本番はabc135-dで時間を溶かして問題すら読まなかったんですが。\ndは13の倍数と聞いて脳死で1001使った判定法のやつを書いてたんですが、途中で関係ないのに気づいてDPでやりました。\n\n\n[問題へのリンク](https://atcoder.jp/contests/abc135/tasks/abc135_f)\n\n\n## 問題の概要\n\n文字列$s,t$が与えられます。$t$を$i$個連結した文字列が、$s$を$j$個連結した時に得られる文字列の部分列であるとき、\n最大の$i$を求めなさい。$j$は任意の整数です。\n\n## 問題を見て\n\n$s$と$t$が最大で$10^5$なので、愚直な$O(N^2)$解法だと$10^{10}$でTLEだなぁと思いました。\n30分くらい考えたんですが、思いつかないので解答を見ることにしました。\n\n## 解答を見て\n\n難易度の高いatcoderの問題に多い気がするのですが、解説が大雑把だなぁと思いました。\nKMP法とZ-algorithmのリンクが紹介されてたのでKMP法の方を調べました。\n\n### KMP法\n\nKMP法は$O(|a|+|b|)$で、文字列$a$に含まれる文字列$b$の開始位置を全て求めるアルゴリズムです。([wiki調べ](https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%8C%E3%83%BC%E3%82%B9%E2%80%93%E3%83%A2%E3%83%AA%E3%82%B9%E2%80%93%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E6%B3%95))\n\n\n最初、[snukeさんの記事](https://snuke.hatenablog.com/entry/2017/07/18/101026)を読みました。\n割と時間をかけて読んだらある文字列$s$に対して$s[0;i-1]$の接頭語と接尾語が一致している最大文字数を$i$ごとに得る方法は分かったんですが、「wikipediaのとなんか違くない？？？」と思いました。\n\nよく考えたら実は繋がっていて、「文字列$a$に含まれる文字列$b$の開始位置を調べる」というのは、\n「文字列$s=a+b$に対して$s[0;i-1]$の接頭語と接尾語が一致している最大文字数を$i$ごとに得る」ことで実現できます。\nwikipediaの説明とsnukeさんの説明とどっちがわかりやすいかは個人差がありそうな気がしました。\n\n実装は[この記事](http://mayokoex.hatenablog.com/entry/2016/03/22/201438)がわかりやすかったです。何人かのこの問題の提出コードを見たのですが、この実装と同じようなものが多かった気がします。\n\n## 実装\n\nKMP法完全に理解した！終了解散解散！とは行かず、もうちょっとやることがあります。\n\nまず、$s$=\"abc\"、$t$=\"bcabca\"のように$s$が$t$より短い場合や、\n$s$=\"bca\"、$t$=\"abc\"のようにループしてる場合があるので、\n少なくとも$|s|$を$2\\times |t|$以上の長さになるまで繰り返します。以降は繰り返した文字列を$ss$とします。\n\nkmp関数は以下のものを使いました。\n文字列$s$の中に登場する文字列$t$の最初のindexの配列を返します。\n例えば、$s$=\"abcabc\"、$t$=\"ab\"を入力とすると$\\[0,3\\]$を返します。\n\n```c++\nvector<ll> kmp(const string &s, const string &t) {\n  vector<ll> table(t.size() + 1);\n  table[0] = -1;\n  ll j = -1;\n  for (ll i = 0; i < t.size(); i++) {\n    while (j >= 0 && t[i] != t[j])\n      j = table[j];\n    table[i + 1] = ++j;\n  }\n  vector<ll> ret;\n  ll m = 0, i = 0, n = s.size();\n  while (m + i < n) {\n    if (t[i] == s[m + i]) {\n      if (++i == (ll)t.size()) {\n        ret.push_back(m);\n        m = m + i - table[i];\n        i = table[i];\n      }\n    } else {\n      m = m + i - table[i];\n      if (i > 0)\n        i = table[i];\n    }\n  }\n  return ret;\n}\n```\n\n\n次に連続している$t$を探すわけですが、有向グラフよりも楽なのでUnionFindを使って分類します。\n$ss$の中で$t$が含まれている部分の最初のindexをkmp関数が返してくれるわけですが、\n$ss$は$s$の繰り返しなので、$|s|$以上のindexは$|s|$未満のindexと重複しているので考えなくて良いです。\n\nまた、基本的にindexの昇順に処理しているのでuniteする前に$x$と$(x+|t|) \\bmod |s|$の親が等しければ$i$が無限に存在することになります。\n\n```c++\nint main() {\n  string s, t;\n  cin >> s >> t;\n  ll slen = s.size();\n  ll tlen = t.size();\n  string ss = s;\n  while (ss.size() < 2*tlen)\n    ss += s;\n  vector<ll> z = kmp(ss, t); // KMP法\n  auto uf = UnionFind(slen); // UnionFind\n  REP(i, z.size()) {\n    ll x = z[i];\n    if (x >= slen)\n      continue; //重複するため\n    ll y = (x + tlen) % slen;\n    if (!uf.unite(x, y)) { //ループしてる\n      cout << -1 << endl;\n      return 0;\n    }\n  }\n  ll ans = 0;\n  REP(i, slen) ans = max(ans, uf.size(i) - 1LL);\n  cout << ans << endl;\n \n  return 0;\n}\n\n```\n\n## 感想\n\nKMP法そもそも知らなかったわけですが、知っててもできたか怪しいなぁと思いました。",
  "bodyHtml": "<h1>abc135-fの考察</h1>\n<p>やったので考察を書きます。まぁ、本番はabc135-dで時間を溶かして問題すら読まなかったんですが。\ndは13の倍数と聞いて脳死で1001使った判定法のやつを書いてたんですが、途中で関係ないのに気づいてDPでやりました。</p>\n<p><a href=\"https://atcoder.jp/contests/abc135/tasks/abc135_f\">問題へのリンク</a></p>\n<h2>問題の概要</h2>\n<p>文字列$s,t$が与えられます。$t$を$i$個連結した文字列が、$s$を$j$個連結した時に得られる文字列の部分列であるとき、\n最大の$i$を求めなさい。$j$は任意の整数です。</p>\n<h2>問題を見て</h2>\n<p>$s$と$t$が最大で$10^5$なので、愚直な$O(N^2)$解法だと$10^{10}$でTLEだなぁと思いました。\n30分くらい考えたんですが、思いつかないので解答を見ることにしました。</p>\n<h2>解答を見て</h2>\n<p>難易度の高いatcoderの問題に多い気がするのですが、解説が大雑把だなぁと思いました。\nKMP法とZ-algorithmのリンクが紹介されてたのでKMP法の方を調べました。</p>\n<h3>KMP法</h3>\n<p>KMP法は$O(|a|+|b|)$で、文字列$a$に含まれる文字列$b$の開始位置を全て求めるアルゴリズムです。(<a href=\"https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%8C%E3%83%BC%E3%82%B9%E2%80%93%E3%83%A2%E3%83%AA%E3%82%B9%E2%80%93%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E6%B3%95\">wiki調べ</a>)</p>\n<p>最初、<a href=\"https://snuke.hatenablog.com/entry/2017/07/18/101026\">snukeさんの記事</a>を読みました。\n割と時間をかけて読んだらある文字列$s$に対して$s[0;i-1]$の接頭語と接尾語が一致している最大文字数を$i$ごとに得る方法は分かったんですが、「wikipediaのとなんか違くない？？？」と思いました。</p>\n<p>よく考えたら実は繋がっていて、「文字列$a$に含まれる文字列$b$の開始位置を調べる」というのは、\n「文字列$s=a+b$に対して$s[0;i-1]$の接頭語と接尾語が一致している最大文字数を$i$ごとに得る」ことで実現できます。\nwikipediaの説明とsnukeさんの説明とどっちがわかりやすいかは個人差がありそうな気がしました。</p>\n<p>実装は<a href=\"http://mayokoex.hatenablog.com/entry/2016/03/22/201438\">この記事</a>がわかりやすかったです。何人かのこの問題の提出コードを見たのですが、この実装と同じようなものが多かった気がします。</p>\n<h2>実装</h2>\n<p>KMP法完全に理解した！終了解散解散！とは行かず、もうちょっとやることがあります。</p>\n<p>まず、$s$=&quot;abc&quot;、$t$=&quot;bcabca&quot;のように$s$が$t$より短い場合や、\n$s$=&quot;bca&quot;、$t$=&quot;abc&quot;のようにループしてる場合があるので、\n少なくとも$|s|$を$2\\times |t|$以上の長さになるまで繰り返します。以降は繰り返した文字列を$ss$とします。</p>\n<p>kmp関数は以下のものを使いました。\n文字列$s$の中に登場する文字列$t$の最初のindexの配列を返します。\n例えば、$s$=&quot;abcabc&quot;、$t$=&quot;ab&quot;を入力とすると$[0,3]$を返します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">vector</span>&lt;ll&gt; kmp(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> &amp;s, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> &amp;t) {\n  <span class=\"hljs-built_in\">vector</span>&lt;ll&gt; table(t.size() + <span class=\"hljs-number\">1</span>);\n  table[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">-1</span>;\n  ll j = <span class=\"hljs-number\">-1</span>;\n  <span class=\"hljs-keyword\">for</span> (ll i = <span class=\"hljs-number\">0</span>; i &lt; t.size(); i++) {\n    <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; t[i] != t[j])\n      j = table[j];\n    table[i + <span class=\"hljs-number\">1</span>] = ++j;\n  }\n  <span class=\"hljs-built_in\">vector</span>&lt;ll&gt; ret;\n  ll m = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>, n = s.size();\n  <span class=\"hljs-keyword\">while</span> (m + i &lt; n) {\n    <span class=\"hljs-keyword\">if</span> (t[i] == s[m + i]) {\n      <span class=\"hljs-keyword\">if</span> (++i == (ll)t.size()) {\n        ret.push_back(m);\n        m = m + i - table[i];\n        i = table[i];\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      m = m + i - table[i];\n      <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span>)\n        i = table[i];\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> ret;\n}</code></pre><p>次に連続している$t$を探すわけですが、有向グラフよりも楽なのでUnionFindを使って分類します。\n$ss$の中で$t$が含まれている部分の最初のindexをkmp関数が返してくれるわけですが、\n$ss$は$s$の繰り返しなので、$|s|$以上のindexは$|s|$未満のindexと重複しているので考えなくて良いです。</p>\n<p>また、基本的にindexの昇順に処理しているのでuniteする前に$x$と$(x+|t|) \\bmod |s|$の親が等しければ$i$が無限に存在することになります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">string</span> s, t;\n  <span class=\"hljs-built_in\">cin</span> &gt;&gt; s &gt;&gt; t;\n  ll slen = s.size();\n  ll tlen = t.size();\n  <span class=\"hljs-built_in\">string</span> ss = s;\n  <span class=\"hljs-keyword\">while</span> (ss.size() &lt; <span class=\"hljs-number\">2</span>*tlen)\n    ss += s;\n  <span class=\"hljs-built_in\">vector</span>&lt;ll&gt; z = kmp(ss, t); <span class=\"hljs-comment\">// KMP法</span>\n  <span class=\"hljs-keyword\">auto</span> uf = UnionFind(slen); <span class=\"hljs-comment\">// UnionFind</span>\n  REP(i, z.size()) {\n    ll x = z[i];\n    <span class=\"hljs-keyword\">if</span> (x &gt;= slen)\n      <span class=\"hljs-keyword\">continue</span>; <span class=\"hljs-comment\">//重複するため</span>\n    ll y = (x + tlen) % slen;\n    <span class=\"hljs-keyword\">if</span> (!uf.unite(x, y)) { <span class=\"hljs-comment\">//ループしてる</span>\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-number\">-1</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n  }\n  ll ans = <span class=\"hljs-number\">0</span>;\n  REP(i, slen) ans = max(ans, uf.size(i) - <span class=\"hljs-number\">1L</span>L);\n  <span class=\"hljs-built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre><h2>感想</h2>\n<p>KMP法そもそも知らなかったわけですが、知っててもできたか怪しいなぁと思いました。</p>\n",
  "preview": "abc135-fの考察\n\nやったので考察を書きます。まぁ、本番はabc135-dで時間を溶かして問題すら読まなかったんですが。",
  "title": "abc135-fの考察",
  "dir": "output",
  "base": "201907302.json",
  "ext": ".json",
  "sourceBase": "201907302.md",
  "sourceExt": ".md"
}